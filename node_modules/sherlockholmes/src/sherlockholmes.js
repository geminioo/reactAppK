/**
 * Sherlockholmes
 * -----
 * Redux logger
 */

import { config} from '../config'

class Sherlockholmes {

  // constructor
  constructor() {

    // if user is running mozilla then use it's built-in WebSocket
    window.WebSocket = window.WebSocket || window.MozWebSocket;

    // if browser doesn't support WebSocket, just show
    // some notification and exit
    if (!window.WebSocket) {
      console.log('Your browser doesn\'t support Websocket')
    }

    this.connect   = this.connect.bind(this)
    this.sendData  = this.sendData.bind(this)
    this.inspector = this.inspector.bind(this)

    // connect websocket
    this.connection = this.connect()

    const self = this
    // check connection state in every 3s
    setInterval(() => {
      if (self.connection.readyState !== self.connection.OPEN) {
        // if lost the connection retry to connect.
        self.connection = self.connect()
      }
    }, 3000)
  }

  /**
   * Connect
   * -----
   * connect to websocket
   */
  connect() {
    return new WebSocket(`ws://${config.HOST}:${config.WS_PORT}`)
  }

  /**
   * Send data to web socket server
   * @param data
   */
  sendData(data) {
    const self = this
    if (self.connection.readyState === self.connection.OPEN) {
      self.connection.send(JSON.stringify(data))
    } else {
      self.connection.onopen = () => {
        self.connection.send(JSON.stringify(data))
      }
    }
  }

  /**
   * Inspector
   * -----
   * Log state, action and sent it to websocket
   * @param getState
   * @returns {function(*): function(*=)}
   */
  inspector({ getState }) {

    const self = this

    return next => (action) => {

      // initalize object
      const obj = {}

      // set prev state
      obj.prev = getState()

      // set action
      obj.action = action

      // call next state
      const returnedValue = next(action)

      // set next state
      obj.next = getState()

      self.sendData(obj)

      // return next value
      return returnedValue
    }
  }
}

export default Sherlockholmes
