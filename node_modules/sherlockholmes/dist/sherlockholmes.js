'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
herlockholmes

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Redux logger


var _config = require('../config');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Sherlockholmes = function () {

  // constructor
  function Sherlockholmes() {
    _classCallCheck(this, Sherlockholmes);

    // if user is running mozilla then use it's built-in WebSocket
    window.WebSocket = window.WebSocket || window.MozWebSocket;

    // if browser doesn't support WebSocket, just show
    // some notification and exit
    if (!window.WebSocket) {
      console.log('Your browser doesn\'t support Websocket');
    }

    this.connect = this.connect.bind(this);
    this.sendData = this.sendData.bind(this);
    this.inspector = this.inspector.bind(this);

    // connect websocket
    this.connection = this.connect();

    var self = this;
    // check connection state in every 3s
    setInterval(function () {
      if (self.connection.readyState !== self.connection.OPEN) {
        // if lost the connection retry to connect.
        self.connection = self.connect();
      }
    }, 3000);
  }

  /**
   * Connect
   * -----
   * connect to websocket
   */


  _createClass(Sherlockholmes, [{
    key: 'connect',
    value: function connect() {
      return new WebSocket('ws://' + _config.config.HOST + ':' + _config.config.WS_PORT);
    }

    /**
     * Send data to web socket server
     * @param data
     */

  }, {
    key: 'sendData',
    value: function sendData(data) {
      var self = this;
      if (self.connection.readyState === self.connection.OPEN) {
        self.connection.send(JSON.stringify(data));
      } else {
        self.connection.onopen = function () {
          self.connection.send(JSON.stringify(data));
        };
      }
    }

    /**
     * Inspector
     * -----
     * Log state, action and sent it to websocket
     * @param getState
     * @returns {function(*): function(*=)}
     */

  }, {
    key: 'inspector',
    value: function inspector(_ref) {
      var getState = _ref.getState;


      var self = this;

      return function (next) {
        return function (action) {

          // initalize object
          var obj = {};

          // set prev state
          obj.prev = getState();

          // set action
          obj.action = action;

          // call next state
          var returnedValue = next(action);

          // set next state
          obj.next = getState();

          self.sendData(obj);

          // return next value
          return returnedValue;
        };
      };
    }
  }]);

  return Sherlockholmes;
}();

exports.default = Sherlockholmes;