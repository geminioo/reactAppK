/**
 * Sherlockholmes
 * -------------
 * redux logger proxy
 */

'use strict';

// Optional. You will see this name in eg. 'ps' or 'top' command

var _websocket = require('websocket');

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _boxen = require('boxen');

var _boxen2 = _interopRequireDefault(_boxen);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _opn = require('opn');

var _opn2 = _interopRequireDefault(_opn);

var _config = require('../config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.title = 'sherlockholmes';

// websocket and http servers


/**
 * Global variables
 */
var WebSocketServer = _websocket.server;
// Port where we'll run the websocket server
var webSocketsServerPort = _config.config.WS_PORT;

/**
 * HTTP server
 */
var app = (0, _express2.default)();
app.use(_express2.default.static(__dirname + '/../public'));

var server = _http2.default.createServer(app);

server.listen(webSocketsServerPort, function () {
  (0, _opn2.default)('http://localhost:' + webSocketsServerPort);
  var msg = _chalk2.default.green('Sherlockholmes start detecting on port : ' + webSocketsServerPort);
  console.log((0, _boxen2.default)(msg, { padding: 1 }));
});

/**
 * WebSocket server
 */
var wsServer = new WebSocketServer({
  // WebSocket server is tied to a HTTP server. WebSocket
  // request is just an enhanced HTTP request. For more info
  // http://tools.ietf.org/html/rfc6455#page-6
  httpServer: server,

  // 16MiB max frame size.
  maxReceivedFrameSize: 0x1000000,

  // 16MiB max message size, only applicable if
  // assembleFragments is true
  maxReceivedMessageSize: 0x1000000
});

var message = function message(_message) {
  console.log(_chalk2.default.blue(new Date().toLocaleString() + ' - ' + _message));
};

// This callback function is called every time someone
// tries to connect to the WebSocket server
wsServer.on('request', function (request) {
  message('Connection from origin: ' + request.origin);

  // accept connection - you should check 'request.origin' to
  // make sure that client is connecting from your website
  // (http://en.wikipedia.org/wiki/Same_origin_policy)
  var connection = request.accept(null, request.origin);

  message('Connection accepted.');

  // user sent some message
  connection.on('message', function (message) {

    // accept only text
    if (message.type === 'utf8') {
      // transform data
      var json = JSON.stringify({ type: 'message', data: message });

      // broadcast data to clients
      wsServer.broadcast(json);
    }
  });
  // user disconnected
  connection.on('close', function (connection, closeReason, description) {
    message('Exit with reason: ' + closeReason);
  });
});